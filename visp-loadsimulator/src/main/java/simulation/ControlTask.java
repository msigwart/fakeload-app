package simulation;

import common.enums.SimulationType;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;

import static common.enums.SimulationType.*;

/**
 * This class acts as the controlling entity of the load simulation. Whenever a load simulation is run, this class is run
 * as a separate thread to monitor the actual load generated by the simulator threads. Whenever a significant deviation
 * between desired and actual load is detected, the class adjusts the load slightly in the direction of target. This way
 * the load generated by the simulation actually reaches the desired level.
 *
 * Created by martensigwart on 13.06.17.
 */
public class ControlTask implements Callable<String> {

    private SimulationLoad load;
    private Map<SimulationType, LoadParameters> loadParameters;


    public ControlTask() {
        this.load = new SimulationLoad();
        this.loadParameters = new HashMap<>();
    }

    @Override
    public String call() throws Exception {
        return null;
    }





    public SimulationLoad getLoad() {
        return load;
    }


    public Boolean containsCpu() {
        return loadParameters.containsKey(CPU);
    }

    public Boolean containsRam() {
        return loadParameters.containsKey(RAM);
    }



    public Integer getCpuMethod() {
        if (containsCpu()) {
            return loadParameters.get(CPU).method;
        }
        return null;
    }

    public Integer getRamMethod() {
        if (containsRam()) {
            return loadParameters.get(RAM).method;
        }
        return null;
    }


    public void setLoadParameters(SimulationType type, Integer workload, Integer method) {
        loadParameters.put(type, new LoadParameters(workload, method));
        load.getWorkloads().put(type, workload);
    }


    private class LoadParameters {
        Integer desiredWorkload;
        Integer method;

        LoadParameters(Integer workload, Integer method) {
            this.desiredWorkload = workload;
            this.method = method;
        }
    }
}

